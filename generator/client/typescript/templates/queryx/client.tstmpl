// Code generated by queryx, DO NOT EDIT.

import { Env, Config, newConfig, getenv } from "./config";
{{- range $m := $.client.Models }}
import { {{ $m.Name }}Query } from "../{{ $m.Name | snake }}";
{{- end }}
import {
  Table,
  BigIntColumn,
  IntegerColumn,
  FloatColumn,
  BooleanColumn,
  StringColumn,
  TextColumn,
  DateColumn,
  TimeColumn,
  DatetimeColumn,
  UUIDColumn,
  JSONColumn,
} from "./table";
import { Adapter } from "./adapter";
import { Clause } from "./clause";

export class QXClient {
  public config: Config;
  public adapter: Adapter;
  {{- range $m := $.client.Models }}
  public {{ $m.Name | camel }}: Table;
  {{- range $c := .Columns }}
  public {{ $m.Name | camel }}{{ $c.Name | pascal }}: {{ goType .Type }}Column;
  {{- end}}
  {{- end}}

  constructor(config: Config) {
    this.config = config;
    this.adapter = new Adapter(config);
    {{- range $m := $.client.Models }}
    this.{{ $m.Name | camel }} = new Table("{{ $m.TableName }}");
    {{- range $c := $m.Columns }}
    this.{{ $m.Name | camel }}{{ $c.Name | pascal }} = this.{{ $m.Name | camel }}.new{{ goType .Type }}Column("{{ $c.Name }}");
    {{- end}}
    {{- end}}
  }

  query<R>(query: string, ...args: any[]) {
    return this.adapter.query<R>(query, ...args);
  }

  queryOne<R>(query: string, ...args: any[]) {
    return this.adapter.queryOne<R>(query, ...args);
  }

  exec(query: string, ...args: any[]) {
    return this.adapter.exec(query, ...args);
  }

  {{- range $m := $.client.Models }}

  query{{ $m.Name }}() {
    return new {{ $m.Name }}Query(this);
  }
  {{- end }}

  raw(fragment: string, ...args: any[]) {
    return new Clause(fragment, args);
  }

  async tx() {
    const tx = new Tx(this.config);
    tx.adapter.db = await this.adapter.newClient();
    await tx.adapter.beginTx();
    return tx;
  }

  async transaction(fn: (t: Tx) => Promise<void>) {
    const tx = await this.tx();
    try {
      await fn(tx);
      await tx.commit();
    } catch (err) {
      await tx.rollback();
      throw err;
    } finally {
      tx.adapter.release();
    }
  }

  and(...clauses: Clause[]) {
    return clauses[0].and(...clauses.slice(1));
  }

  or(...clauses: Clause[]) {
    return clauses[0].or(...clauses.slice(1));
  }
}

export class Tx extends QXClient {
  constructor(config) {
    super(config);
  }

  commit() {
    return this.adapter.commit();
  }

  rollback() {
    return this.adapter.rollback();
  }
}

export const newClient = () => {
  let env = getenv("QUERYX_ENV") || "development";
  return newClientWithEnv(env);
};

export const newClientWithEnv = (env: Env) => {
  let config = newConfig(env);
  let client = new QXClient(config);
  client.adapter.connect();
  return client;
};
