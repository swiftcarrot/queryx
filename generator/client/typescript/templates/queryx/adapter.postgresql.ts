// Code generated by queryx, DO NOT EDIT.

import { Pool, QueryResultRow, types } from "pg";
import { parse } from "date-fns";
import { Config } from "./config";

types.setTypeParser(types.builtins.INT8, (val) => parseInt(val, 10));

export class Adapter {
  public config: Config;
  public pool: Pool;
  public db: Pool;

  constructor(config: Config) {
    this.config = config;
  }

  connect() {
    const pool = new Pool({
      connectionString: this.config.url,
    });
    this.pool = pool;
    this.db = pool;
  }

  newClient() {
    return this.pool.connect();
  }

  release() {
    this.db.release();
  }

  private _query<R extends QueryResultRow = any, I extends any[] = any[]>(
    query: string,
    args?: I,
  ) {
    let [query1, args1] = rebind<I>(query, args);
    return this.db.query<R, I>(query1, args1);
  }

  async query<R extends QueryResultRow = any>(query: string, ...args: any[]) {
    const res = await this._query<R>(query, args);
    return res.rows;
  }

  async queryOne<R extends QueryResultRow = any>(
    query: string,
    ...args: any[]
  ) {
    const res = await this._query<R>(query, args);
    return res.rows[0];
  }

  async exec(query: string, ...args: any[]) {
    const res = await this._query(query, args);
    return res.rowCount;
  }

  async beginTx() {
    await this.exec("BEGIN");
  }

  async commit() {
    await this.exec("COMMIT");
  }

  async rollback() {
    await this.exec("ROLLBACK");
  }
}

export function rebind<T extends any[] = any[]>(query: string, args?: T) {
  let str = "";
  let i = 0;
  let j = 1;
  let args1: any[] = [];

  for (i = query.indexOf("?"); i !== -1; i = query.indexOf("?")) {
    str += query.substring(0, i);

    if (Array.isArray(args[j - 1])) {
      args1 = args1.concat(args[j - 1]);
      str += args[j - 1].map((_, i) => "$" + (j + i)).join(", ");
      j += args.length;
    } else {
      args1.push(args[j - 1]);
      str += "$" + j;
      j++;
    }

    query = query.substring(i + 1);
  }

  return [str + query, args1];
}

export function adapterValue(type: string, value: any) {
  return value;
}

export function adapterScan(type: string, value: any) {
  switch (type) {
    case "time":
      return parse(value, "HH:mm:ss", new Date());
    default:
      return value;
  }
}
