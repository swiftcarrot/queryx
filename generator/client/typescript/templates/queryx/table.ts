// Code generated by queryx, DO NOT EDIT.

import { Clause } from "./clause";

export const newTable = (name: string) => {
  return new Table(name);
};

export class Table {
  name: string;

  constructor(name: string) {
    this.name = name;
  }

  newBigIntColumn(name: string) {
    return new BigIntColumn(this, name);
  }

  // TODO: on demand type generation based on schema
  newIntegerColumn(name: string) {
    return new IntegerColumn(this, name);
  }

  newStringColumn(name: string) {
    return new StringColumn(this, name);
  }

  newTextColumn(name: string) {
    return new TextColumn(this, name);
  }

  newDateColumn(name: string) {
    return new DateColumn(this, name);
  }

  newTimeColumn(name: string) {
    return new TimeColumn(this, name);
  }

  newDatetimeColumn(name: string) {
    return new DatetimeColumn(this, name);
  }

  newBooleanColumn(name: string) {
    return new BooleanColumn(this, name);
  }

  newJSONColumn(name: string) {
    return new JSONColumn(this, name);
  }

  newUUIDColumn(name: string) {
    return new UUIDColumn(this, name);
  }

  newFloatColumn(name: string) {
    return new FloatColumn(this, name);
  }
}

class Column {
  table: Table;
  name: string;

  constructor(table: Table, name: string) {
    this.table = table;
    this.name = name;
  }
}

class NumberColumn extends Column {
  eq(v: number) {
    return new Clause(`${this.table.name}.${this.name} = ?`, [v]);
  }
  ne(v: number) {}
  gt(v: number) {}
  gte(v: number) {}
  lt(v: number) {}
  lte(v: number) {}
  in(v: number[]) {
    if (!v.length) {
      return new Clause("1=0", []);
    }
    return new Clause(`${this.table.name}.${this.name} in (?)`, [v]);
  }
  nin(v: number[]) {}
}

export class BigIntColumn extends NumberColumn {}

export class IntegerColumn extends NumberColumn {}

export class FloatColumn extends NumberColumn {}

export class BooleanColumn extends Column {
  eq(v: boolean) {
    return new Clause(`${this.table.name}.${this.name} = ?`, [v]);
  }
  ne(v: boolean) {
    return new Clause(`${this.table.name}.${this.name} <> ?`, [v]);
  }
}

export class StringColumn extends Column {
  eq(v: string) {
    return new Clause(`${this.table.name}.${this.name} = ?`, [v]);
  }
  ne(v: string) {}
  gt(v: string) {}
  gte(v: string) {}
  lt(v: string) {}
  lte(v: string) {}
}

export class TextColumn extends StringColumn {}

export class DateColumn extends Column {
  eq(v: string) {
    return new Clause(`${this.table.name}.${this.name} = ?`, [v]);
  }
  gt(v: string) {}
  gte(v: string) {}
  lt(v: string) {}
  lte(v: string) {}
}

export class TimeColumn extends Column {
  eq(v: string) {
    return new Clause(`${this.table.name}.${this.name} = ?`, [v]);
  }
  gt(v: string) {
    return new Clause(`${this.table.name}.${this.name} > ?`, [v]);
  }
  gte(v: string) {
    return new Clause(`${this.table.name}.${this.name} >= ?`, [v]);
  }
  lt(v: string) {
    return new Clause(`${this.table.name}.${this.name} < ?`, [v]);
  }
  lte(v: string) {
    return new Clause(`${this.table.name}.${this.name} <= ?`, [v]);
  }
}

export class DatetimeColumn extends Column {
  eq(v: string) {
    return new Clause(`${this.table.name}.${this.name} = ?`, [v]);
  }
  gt(v: string) {
    return new Clause(`${this.table.name}.${this.name} > ?`, [v]);
  }
  gte(v: string) {
    return new Clause(`${this.table.name}.${this.name} >= ?`, [v]);
  }
  lt(v: string) {
    return new Clause(`${this.table.name}.${this.name} < ?`, [v]);
  }
  lte(v: string) {
    return new Clause(`${this.table.name}.${this.name} <= ?`, [v]);
  }
}

export class UUIDColumn extends StringColumn {}

export class JSONColumn extends Column {}
