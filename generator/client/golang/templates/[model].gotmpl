// Code generated by queryx, DO NOT EDIT.

package {{ $.packageName }}

import (
	"strings"
	"fmt"

	"{{ $.goModPath }}/{{ $.packageName }}/queryx"
)

type {{ $.model.Name }} struct {
	{{- range $c := .model.Columns }}
	{{ pascal $c.Name }} {{ goModelType $c.Type $c.Null }} `json:"{{ camel $c.Name }}" db:"{{ $c.Name }}"`
	{{- end }}
	{{- range $b := $.model.BelongsTo}}
	{{ $b.Name | pascal }} *{{ $b.ModelName }} `json:"{{ camel $b.Name }}"`
	{{- end }}
	{{- range $h := $.model.HasMany }}
	{{ $h.Name | pascal }} []*{{ $h.ModelName }} `json:"{{ $h.Name | camel }}"`
	{{- end }}
	{{- range $h := $.model.HasOne }}
	{{ $h.Name | pascal }} *{{ $h.ModelName }} `json:"{{ $h.Name | camel }}"`
	{{- end }}

	schema *queryx.Schema
	queries Queries
}

{{- $m := goReceiver $.model.Name }}

// String implements the stringer interface.
func ({{ $m }} *{{.model.Name}}) String() string {
	var b strings.Builder
	b.WriteString("({{ $.model.Name }} ")
	{{- range $i, $c := $.model.Columns }}
	{{- if $c.Null }}
	b.WriteString(fmt.Sprintf("{{ $c.Name }}: %s", {{ $m }}.{{ pascal $c.Name }}))
	{{- else if eq $c.Type "string" }}
	b.WriteString(fmt.Sprintf(`{{ $c.Name }}: "%s"`, {{ $m }}.{{ pascal $c.Name }}))
	{{- else }}
	b.WriteString(fmt.Sprintf("{{ $c.Name }}: %v", {{ $m }}.{{ pascal $c.Name }}))
	{{- end }}
	{{- $l := len $.model.Columns }}
	{{- if ne $i (sub $l 1) }}
	b.WriteString(", ")
	{{- end }}
	{{- end }}
	b.WriteString(")")
	return b.String()
}

func ({{ $m }} *{{.model.Name}}) applyChange(change *queryx.{{.model.Name}}Change) error {
	if change == nil {
		return nil
	}

	{{- range $c := $.model.Columns }}
	{{- $f := $c.Name | pascal }}
	if change.{{ $f }}.Set {
		{{- $t1 := goModelType $c.Type $c.Null }}
		{{- $t2 := printf "queryx.%s" (goType $c.Type) }}
		{{- if eq $t1 $t2 }}
		{{ $m }}.{{ pascal $c.Name}} = change.{{ $f }}
		{{- else }}
		{{ $m }}.{{ pascal $c.Name}} = change.{{ $f }}.Val
		{{- end }}
	}
	{{- end }}
	return nil
}

{{- if $.model.PrimaryKey }}
func ({{ $m }} *{{.model.Name}}) Update(change *queryx.{{.model.Name}}Change) error {
	_, err := {{ $m }}.queries.Query{{.model.Name}}().Where({{$m}}.schema.And(
	{{- range $i, $c := $.model.PrimaryKey.Columns -}}
		{{ if $i }}, {{ end }}{{ $m }}.schema.{{ $.model.Name }}{{ $c.Name | pascal }}.EQ({{ $m }}.{{ $c.Name | pascal }})
	{{- end -}}
	)).UpdateAll(change)
	if err != nil {
		return err
	}

	return {{ $m }}.applyChange(change)
}

func ({{ $m }} *{{ $.model.Name }}) Delete() error {
	_, err := {{ $m }}.queries.Query{{ $.model.Name }}().Delete(
	{{- range $i, $c := $.model.PrimaryKey.Columns -}}
		{{ if $i }}, {{ end }}{{ $m }}.{{ $c.Name | pascal }}
	{{- end -}})
	return err
}
{{- end }}

{{- range $h := $.model.HasMany }}

{{if $h.Through }}
func ({{ $m }} *{{ $.model.Name }}) Query{{ $h.Name | pascal }}() *{{ $h.ModelName }}Query {
	return {{ $m }}.queries.Query{{ $h.ModelName }}().
		Joins("INNER JOIN {{ $h.Through }} ON {{ $h.Through }}.{{ $h.ModelName | snake }}_id = {{ $h.Name }}.id").
		Where({{ $m }}.schema.{{ $h.Through | singular | pascal }}{{ $h.ForeignKey | pascal }}.EQ({{ $m }}.ID))
}

func ({{ $m }} *{{ $.model.Name }}) Preload{{ $h.Name | pascal }}() error {
	rows1, err := {{ $m }}.queries.Query{{ $h.Through | singular | pascal }}().Where({{ $m }}.schema.{{ $h.Through | singular | pascal }}{{ $.model.Name }}ID.EQ({{ $m }}.ID)).All()
	if err != nil {
		return err
	}
	{{ $m }}.{{ $h.Through | pascal }}=rows1
	ids1 := []int64{}
	for _, r := range rows1 {
		ids1 = append(ids1, r.{{ $h.ModelName }}ID.Val)
	}
	rows2, err := {{ $m }}.queries.Query{{ $h.ModelName }}().Where({{ $m }}.schema.{{ $h.ModelName }}ID.In(ids1)).All()
	if err != nil {
		return err
	}
	{{ $m }}.{{ $h.Name | pascal }}=rows2
	return nil
}
{{- else }}
func ({{ $m }} *{{ $.model.Name }}) Query{{ $h.Name | pascal }}() *{{ $h.ModelName }}Query {
	return {{ $m }}.queries.Query{{ $h.ModelName }}().Where({{ $m }}.schema.{{ $h.ModelName }}{{ $h.ForeignKey | pascal }}.EQ({{ $m }}.ID))
}

func ({{ $m }} *{{ $.model.Name }}) Preload{{ $h.Name | pascal }}() error {
    rows, err := {{ $m }}.queries.Query{{ $h.ModelName }}().Where({{ $m }}.schema.{{ $h.ModelName }}{{ $.model.Name }}ID.EQ({{ $m }}.ID)).All()
	if err != nil {
		return err
	}
	{{ $m }}.{{ $h.Name | pascal }}=rows
	return nil
}
{{- end }}

{{- end }}
