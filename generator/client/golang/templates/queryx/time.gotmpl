// Code generated by queryx, DO NOT EDIT.

package queryx

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"time"
	{{ if eq $.client.Adapter "mysql" }}"fmt"{{ end }}
)

type Time struct {
	Val   time.Time
	Valid bool
	Set   bool
}

func parseTime(s string) (*time.Time, error) {
	{{- if eq $.client.Adapter "mysql" }}
	s = fmt.Sprintf("2006-01-02 %+v", s)
	layout := "2006-01-02 15:04:05"
 	{{- else if or (eq .client.Adapter "postgresql") (eq $.client.Adapter "sqlite") }}
	layout := "15:04:05"
	{{- end }}
	loc, err := time.LoadLocation("{{ $.client.TimeZone }}")
	if err != nil {
		return nil, err
	}
	t, err := time.ParseInLocation(layout, s, loc)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func NewTime(v string) Time {
	t, err := parseTime(v)
	if err != nil {
		return Time{Set: true}
	}

	return Time{Val: *t, Valid: true, Set: true}
}

func NewNullableTime(v *string) Time {
	if v != nil {
		return NewTime(*v)
	}
	return Time{Set: true}
}

// Scan implements the Scanner interface.
func (t *Time) Scan(value interface{}) error {
	n := sql.NullTime{}
	err := n.Scan(value)
	if err != nil {
		return err
	}
	t.Val, t.Valid = n.Time, n.Valid
	{{- if eq .client.Adapter "mysql" }}
	loc, err := loadLocation()
	if err != nil {
		return err
	}
	t.Val = t.Val.In(loc)
	{{- end }}
	return nil
}

// Value implements the driver Valuer interface.
func (t Time) Value() (driver.Value, error) {
	if !t.Valid {
		return nil, nil
	}
	{{- if eq .client.Adapter "mysql"}}
	return t.Val.UTC(), nil
	{{- else}}
	return t.Val, nil
	{{- end}}
}

// MarshalJSON implements the json.Marshaler interface.
func (t Time) MarshalJSON() ([]byte, error) {
	if !t.Valid {
		return json.Marshal(nil)
	}
	return json.Marshal(t.Val.Format("15:04:05"))
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (t *Time) UnmarshalJSON(data []byte) error {
	t.Set = true
	s := string(data)
	if s == "null" || s == "" {
		return nil
	}
	t.Valid = true
	s = s[len(`"`) : len(s)-len(`"`)]
	tt, err := parseTime(s)
	if err != nil {
		return err
	}

	t.Val = *tt
	return nil
}

// String implements the stringer interface.
func (t Time) String() string {
	if !t.Valid {
		return "null"
	}
	return t.Val.Format("15:04:05")
}
