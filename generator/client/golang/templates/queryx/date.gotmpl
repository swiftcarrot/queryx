// Code generated by queryx, DO NOT EDIT.

package queryx

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"time"
)

type Date struct {
	Val   time.Time
	Valid bool
	Set   bool
}

func parseDate(s string) (*time.Time, error) {
	loc, err := time.LoadLocation("{{ $.client.TimeZone}}")
	if err != nil {
		return nil, err
	}
	t, err := time.ParseInLocation("2006-01-02", s, loc)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func NewDate(v string) Date {
	t, err := parseDate(v)
	if err != nil {
		return Date{Set: true}
	}

	return Date{Val: *t, Valid: true, Set: true}
}

func NewNullableDate(v *string) Date {
	if v != nil {
		return NewDate(*v)
	}
	return Date{Set: true}
}

// Scan implements the Scanner interface.
func (d *Date) Scan(value interface{}) error {
	n := sql.NullTime{}
	err := n.Scan(value)
	if err != nil {
		return err
	}
	d.Val, d.Valid = n.Time, n.Valid
	return nil
}

// Value implements the driver Valuer interface.
func (d Date) Value() (driver.Value, error) {
	if !d.Valid {
		return nil, nil
	}
	return d.Val, nil
}

// MarshalJSON implements the json.Marshaler interface.
func (d Date) MarshalJSON() ([]byte, error) {
	if !d.Valid {
		return json.Marshal(nil)
	}
	return json.Marshal(d.Val.Format("2006-01-02"))
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (d *Date) UnmarshalJSON(data []byte) error {
	d.Set = true
	s := string(data)
	if s == "null" || s == "" {
		return nil
	}
	d.Valid = true
	s = s[len(`"`) : len(s)-len(`"`)]
	t, err := parseDate(s)
	if err != nil {
		return err
	}

	d.Val = *t
	return nil
}

// String implements the stringer interface.
func (d Date) String() string {
	if !d.Valid {
		return "null"
	}
	return d.Val.Format("2006-01-02")
}
