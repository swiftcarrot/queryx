// Code generated by queryx, DO NOT EDIT.

package queryx

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"time"
)

type Datetime struct {
	Val   time.Time
	Valid bool
	Set   bool
}

func loadLocation() (*time.Location, error) {
	return time.LoadLocation("Local")
}

func parseDatetime(s string) (*time.Time, error) {
	loc, err := loadLocation()
	if err != nil {
		return nil, err
	}
	t, err := time.ParseInLocation("2006-01-02 15:04:05", s, loc)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func Now(layout string) string {
	loc, _ := loadLocation()
	return time.Now().In(loc).Format(layout)
}

func NewDatetime(v string) Datetime {
	t, err := parseDatetime(v)
	if err != nil {
		return Datetime{Set: true}
	}
	return Datetime{Val: *t, Valid: true, Set: true}
}

func NewNullableDatetime(v *string) Datetime {
	if v != nil {
		return NewDatetime(*v)
	}
	return Datetime{Set: true}
}

// Scan implements the Scanner interface.
func (d *Datetime) Scan(value interface{}) error {
	n := sql.NullTime{}
	err := n.Scan(value)
	if err != nil {
		return err
	}
	d.Val, d.Valid = n.Time, n.Valid
	loc, err := loadLocation()
	if err != nil {
		return err
	}
	d.Val = d.Val.In(loc)
	return nil
}

// Value implements the driver Valuer interface.
func (d Datetime) Value() (driver.Value, error) {
	if !d.Valid {
		return nil, nil
	}
	return d.Val.UTC(), nil
}

// MarshalJSON implements the json.Marshaler interface.
func (d Datetime) MarshalJSON() ([]byte, error) {
	if !d.Valid {
		return json.Marshal(nil)
	}
	return json.Marshal(d.Val.UTC())
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (d *Datetime) UnmarshalJSON(data []byte) error {
	d.Set = true
	s := string(data)
	if s == "null" || s == "" {
		return nil
	}
	d.Valid = true
	t := time.Time{}
	err := t.UnmarshalJSON(data)
	if err != nil {
		return err
	}

	location, err := loadLocation()
	if err != nil {
		return err
	}
	d.Val = t.In(location)

	return nil
}

// String implements the stringer interface.
func (d Datetime) String() string {
	if !d.Valid {
		return "null"
	}
	return d.Val.Format("2006-01-02 15:04:05")
}
